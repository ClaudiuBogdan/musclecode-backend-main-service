datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model AlgorithmTemplate {
  id         String   @id @default(uuid())
  title      String
  categories String[]
  summary    String
  lessons    Json     @default("[]") @db.JsonB // Array of lessons stored as JSON
  difficulty String
  level      Int?
  tags       String[]
  files      Json // Array stored as JSON
  userId     String? // Null indicates system template
  parentId   String? // Original template ID if cloned
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  parent          AlgorithmTemplate?    @relation("TemplateClones", fields: [parentId], references: [id])
  clones          AlgorithmTemplate[]   @relation("TemplateClones")
  collections     AlgorithmCollection[]
  userAlgorithms  AlgorithmUserData[]
  dailyAlgorithms DailyAlgorithm[]

  @@index([userId])
  @@index([categories])
  @@index([parentId])
}

model Collection {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String? // Null indicates system collection
  parentId    String? // Original collection ID if cloned
  createdAt   DateTime @default(now())

  // Relations
  parent     Collection?           @relation("CollectionClones", fields: [parentId], references: [id])
  clones     Collection[]          @relation("CollectionClones")
  algorithms AlgorithmCollection[]

  @@index([userId])
  @@index([parentId])
}

model AlgorithmCollection {
  algorithmId  String
  collectionId String
  algorithm    AlgorithmTemplate @relation(fields: [algorithmId], references: [id])
  collection   Collection        @relation(fields: [collectionId], references: [id])

  @@id([algorithmId, collectionId])
  @@index([collectionId])
}

model AlgorithmUserData {
  id           String            @id @default(uuid())
  userId       String
  algorithmId  String
  notes        String?
  createdAt    DateTime          @default(now())
  due          DateTime          @default(now()) // Next review date
  scheduleData Json // FSRS scheduling data as JSON
  algorithm    AlgorithmTemplate @relation(fields: [algorithmId], references: [id])
  submissions  Submission[]

  @@unique([userId, algorithmId])
  @@index([userId])
  @@index([due])
}

model Submission {
  id                  String            @id @default(uuid())
  userId              String
  algorithmUserDataId String
  algorithmId         String
  files               Json
  language            String
  timeSpent           Int
  notes               String?
  difficulty          String
  scheduleData        Json // Snapshot of schedule data as JSON string
  createdAt           DateTime          @default(now())
  algorithmUserData   AlgorithmUserData @relation(fields: [algorithmUserDataId], references: [id])

  @@index([userId, algorithmId])
}

model DailyAlgorithm {
  id          String            @id @default(uuid())
  userId      String
  algorithmId String
  date        DateTime
  completed   Boolean           @default(false)
  algorithm   AlgorithmTemplate @relation(fields: [algorithmId], references: [id])
  createdAt   DateTime          @default(now())

  @@unique([userId, algorithmId, date])
  @@index([userId, date])
}

model UserOnboarding {
  id          String       @id @default(uuid())
  userId      String       @unique
  currentStep String // welcome, goals, quiz, summary
  isCompleted Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  goals       UserGoals?
  quizResults QuizResults?

  @@index([userId])
}

model UserGoals {
  id                  String         @id @default(uuid())
  userId              String         @unique
  onboardingId        String         @unique
  onboarding          UserOnboarding @relation(fields: [onboardingId], references: [id])
  studyTime           Int            @default(30) // minutes per day
  selectedCollections String[]       @default([])
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([userId])
}

model QuizResults {
  id           String         @id @default(uuid())
  userId       String         @unique
  onboardingId String         @unique
  onboarding   UserOnboarding @relation(fields: [onboardingId], references: [id])
  answers      Json
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([userId])
}

model ChatThread {
  id          String   @id @default(uuid())
  userId      String
  algorithmId String
  type        String   @default("chat") // chat, hint
  messages    Json     @default("[]") // Array of messages stored as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([algorithmId])
}
